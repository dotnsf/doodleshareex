<!DOCTYPE html>
<html lang="ja">
<head>
<meta charset="UTF-8"/>
<title>お絵描きライブ(<%= room %>)</title>
<script type="text/javascript" src="//code.jquery.com/jquery-2.2.4.min.js"></script>
<link href="//maxcdn.bootstrapcdn.com/bootstrap/4.5.1/css/bootstrap.min.css" rel="stylesheet"/>
<script src="//maxcdn.bootstrapcdn.com/bootstrap/4.5.1/js/bootstrap.min.js"></script>
<link rel="stylesheet" href="//cdn.datatables.net/t/bs-3.3.6/jqc-1.12.0,dt-1.10.11/datatables.min.css"/> 
<script src="//cdn.datatables.net/t/bs-3.3.6/jqc-1.12.0,dt-1.10.11/datatables.min.js"></script>

<link href="/colorbox.css" rel="stylesheet"/>
<script src="/jquery.colorbox-min.js"></script>

<meta name="viewport" content="width=device-width,initial-scale=1"/>
<meta name="apple-mobile-web-app-capable" content="yes"/>
<meta name="apple-mobile-web-app-status-bar-style" content="black"/>
<meta name="apple-mobile-web-app-title" content="お絵描きライブ"/>

<link rel="shortcut icon" href="/icon.png" type="image/png"/>
<link rel="icon" href="/icon.png" type="image/png"/>
<link rel="apple-touch-icon" href="/icon.png"/>

<script>
var images = [];
$(function(){
  $('#interlude').change( function(){
    $('#display_interlude').val( $('#interlude').val() );
    redrawImages();
  });
  
  $.extend( $.fn.dataTable.defaults, {
    language: {
      url: '//cdn.datatables.net/plug-ins/9dcbecd42ad/i18n/Japanese.json'
    }
  });
  $('#images_table_tbody').html( '' );
  $.ajax({
    type: 'GET',
    url: '/db/images?room=<%= room %>',
    success: function( result ){
      if( result && result.status ){
        images = [];
        for( var i = 0; i < result.images.length; i ++ ){
          images.push( result.images[i] );
        }
        redrawImages();
      }
    },
    error: function( e0, e1, e2 ){
      console.log( e0, e1, e2 );
    }
  });
});

var groups = [];
function redrawImages(){
  $('#cards-groups').html( '' );
  if( images && images.length > 0 ){
    var interlude = parseInt( $('#interlude').val() );
    /*var*/ groups = [];
    if( interlude == 0 ){
      groups.push( [] );
      images.forEach( function( image ){
        image.timestamp = parseInt( image.timestamp );
        groups[0].push( image );
      });
    }else{
      var last_timestamp = 0;
      for( var i = 0; i < images.length; i ++ ){
        var image = images[i];
        image.timestamp = parseInt( image.timestamp );
        if( i == 0 || ( image.timestamp + interlude * 1000 < last_timestamp && groups.length < 6 ) ){
          groups.push( [] );
        }
        groups[groups.length-1].push( image );
        last_timestamp = image.timestamp;
      }
    }

    drawGroups();

    //. DnD イベントハンドラー
    var lists = $('ul.my-list-group li');
    lists.on( 'dragstart', onMyDragStart );
    lists.on( 'dragover', onMyDragOver );
    lists.on( 'dragleave', onMyDragLeave );
    lists.on( 'drop', onMyDrop );
   
    function onMyDragStart( e ){
      e.originalEvent.dataTransfer.setData( 'text', $(this).data('id') );
    }

    function onMyDragOver( e ){
      e.preventDefault();
      if( ( e.offsetY ) < ( $(this).innerHeight() / 4 ) ){
        //. マウスカーソルの位置が要素の四分の１より上
        $(this).css({
          'border-top': '2px solid blue',
          'border-bottom': '',
          'border-left': '',
          'border-right': ''
        });
      }else if( ( e.offsetY ) > ( $(this).innerHeight() / 4 * 3 ) ){
        //. マウスカーソルの位置が要素の四分の３より下
        $(this).css({
          'border-top': '',
          'border-bottom': '2px solid blue',
          'border-left': '',
          'border-right': ''
        });
      }else if( ( e.offsetX ) < ( $(this).innerWidth() / 4 ) ){
        //. マウスカーソルの位置が要素の四分の１より左
        $(this).css({
          'border-top': '',
          'border-bottom': '',
          'border-left': '2px solid blue',
          'border-right': ''
        });
      }else if( ( e.offsetX ) > ( $(this).innerWidth() / 4 * 3 ) ){
        //. マウスカーソルの位置が要素の四分の３より右
        $(this).css({
          'border-top': '',
          'border-bottom': '',
          'border-left': '',
          'border-right': '2px solid blue'
        });
      }
    }

    function onMyDragLeave( e ){
      $(this).css({
        'border-top': '',
        'border-bottom': '',
        'border-left': '',
        'border-right': ''
      });
    }

    function onMyDrop( e ){
      e.preventDefault();
      var id = e.originalEvent.dataTransfer.getData( 'text' );
      if( ( e.offsetY ) < $( $(this).innerHeight() / 4 ) ){
        $('li[data-id=\'' + id + '\']' ).insertBefore( this );
      }else if( ( e.offsetY ) > ( $(this).innerHeight() / 4 * 3 ) ){
        $('li[data-id=\'' + id + '\']' ).insertAfter( this );
      }else if( ( e.offsetX ) < ( $(this).innerWidth() / 4 ) ){
        //. 列挿入 #38
        //. L.83 の div_col を左に挿入
        var col_id = $(this).parent().parent().parent().attr( 'data-id' );  //. #col_id の左に挿入する
        var div_col = '<div class="col-sm-2"><div class="card"><ul class="list-group my-list-group list-group-flush"></ul></div></div>';
        //$(div_col).insertBefore( $('div[data-id=\'' + col_id + '\']') );

        //. groups 再設定後に drawGroups(); が必要かも？
        //. でもそのためには時間設定も必要？
      }else if( ( e.offsetX ) > ( $(this).innerWidth() / 4 * 3 ) ){
        //. 列挿入 #38
        //. L.83 の div_col を右に挿入
      }
      $(this).css({
        'border-top': '',
        'border-bottom': '',
        'border-left': '',
        'border-right': ''
      });
    }

    function drawGroups(){
      $('#cards-groups').html( '' );
      var id_cnt = 1;
      for( var i = 0 ; i < groups.length; i ++ ){
        var n = [ 12, 12, 6, 4, 3, 2, 2 ][groups.length];
        var div_col = '<div class="col-sm-' + n + '" data-id="' + ( i ) + '">';
        div_col += '<div class="card"><ul class="list-group my-list-group list-group-flush">';

        for( var j = 0; j < groups[i].length; j ++ ){
          var li = '<li class="list-group-item" data-id="' + ( id_cnt ++ ) + '" draggable="true">';
  
          var image = groups[i][j];
          var tbl = '<table><tr>'
            + '<td><input type="checkbox" name="chk_image" class="chk_images" id="chk_image_' + image.id + '" comment="' + image.comment + '" dname="' + image.name + '" uuid="' + image.uuid + '"/></td>'
            + '<td>' + name2link( image.name, image.uuid ) + '<br/><img src="/db/image?id=' + image.id + '" title="' + image.comment + '" width="200"/><br/>'
            + timestamp2datetime( image.timestamp ) + '</td>'
            + '<td><button class="btn btn-danger" onClick="deleteImage(\'' + image.id + '\');">削除</button></td>'
            + '</tr></table>';
          li += tbl;

          li += '</li>';
          div_col += li;
        }
 
        div_col += '</ul></div></div>';     
        $('#cards-groups').append( div_col );

        //. チェックボックスが操作されたら「同じユーザーの描いた画像を全てチェック」のチェックは無条件に外す
        $('.chk_images').change( function(){
          //. ここを有効にしてしまうと、永久にチェックが付かなくなる
          //$('#select_all_for_checked_users').attr( 'checked', false ).prop( 'checked', false ); //.change();
        });
      }
    }
  }
}

function timestamp2datetime( ts ){
  if( ts ){
    if( typeof ts == 'string' ){
      ts = parseInt( ts );
    }
    var dt = new Date( ts );
    var yyyy = dt.getFullYear();
    var mm = dt.getMonth() + 1;
    var dd = dt.getDate();
    var hh = dt.getHours();
    var nn = dt.getMinutes();
    var ss = dt.getSeconds();
    var datetime = yyyy + '-' + ( mm < 10 ? '0' : '' ) + mm + '-' + ( dd < 10 ? '0' : '' ) + dd
      + ' ' + ( hh < 10 ? '0' : '' ) + hh + ':' + ( nn < 10 ? '0' : '' ) + nn + ':' + ( ss < 10 ? '0' : '' ) + ss;
    return datetime;
  }else{
    return "";
  }
}

function selected_images(){
  var ids = [];
  var comments = [];
  $('.chk_images:checked').each( function( idx, chk_image ){
    //console.log( idx, chk_image );
    var id = $(chk_image).prop( 'id' ).substr( 10 );
    ids.push( id );
    var comment = $(chk_image).attr( 'comment' );
    comments.push( comment );
  });

  $('#card-groups').html( '' );
  $.colorbox.remove();
  var cards = [];
  for( var i = 0; i < ids.length; i ++ ){
    var id = ids[i];
    var card = '<div id="card_' + id + '" class="card">'
      + '<img class="card-img-top" id="image_' + id + '" src="/db/image?id=' + id + '"/>'
      + '<div class="card-body"><p class="card-text">' + comments[i] + '</p></div>'
      + '</div>';
    cards.push( card );
  }

  appendCardGroups( '#card-groups', cards );
  $('#imagesModal').modal();
}

//. num 個の要素をなるべく正方形に近い表形式の card-group 化する
function appendCardGroups( cardgroups_selector, cards ){
  var num = cards.length;

  //. 近づける正方形の一辺の長さ
  var m = Math.ceil( Math.sqrt( num ) );
  //. m 個の card-group が必要
  for( var i = 0; i < m; i ++ ){
    $(cardgroups_selector).append( '<div class="card-group" id="cards-' + i + '">' );
  }
  //. ( m * m ) の正方形の中に表示する
  for( var i = 0; i < num; i ++ ){
    var card = cards[i];
    var row = Math.floor( i / m );
    $('#cards-'+row).append( card );
  }

  if( num % m ){
    var row = Math.floor( num / m );
    for( var i = num; i % m > 0; i ++ ){
      var dummycard = '<div class="card"></div>';
      $('#cards-'+row).append( dummycard );
    }
  }
}

//. #9
function named_images( _uuid ){
  var ids = [];
  var comments = [];
  var names = [];
  $('.chk_images').each( function( idx, chk_image ){
    //console.log( idx, chk_image );
    var uuid = $(chk_image).attr( 'uuid' );
    if( uuid == _uuid ){
      var id = $(chk_image).prop( 'id' ).substr( 10 );
      ids.push( id );
      var comment = $(chk_image).attr( 'comment' );
      comments.push( comment );
      var name = $(chk_image).attr( 'dname' );
      names.push( name );
    }
  });

  $('#card-groups').html( '' );
  $.colorbox.remove();
  var cards = [];
  for( var i = 0; i < ids.length; i ++ ){
    var id = ids[i];
    var card = '<div id="card_' + id + '" class="card">'
      + names[i] + '<br/>'
      + '<img class="card-img-top" id="image_' + id + '" src="/db/image?id=' + id + '"/>'
      + '<div class="card-body"><p class="card-text">' + comments[i] + '</p></div>'
      + '</div>';
    cards.push( card );
  }

  appendCardGroups( '#card-groups', cards );
  $('#imagesModal').modal();
}

function name2link( name, uuid ){
  var a = '<a href="#" onclick="named_images(\'' + uuid + '\');">' + name + '</a>';
  return a;
}

function deleteImage( image_id ){
  if( confirm( image_id + ' の画像を削除します' ) ){
    $.ajax({
      url: '/db/image?id=' + image_id,
      type: 'DELETE',
      success: function( result ){
        location.href = '/savedimages?room=<%= room %>';
      },
      error: function( e0, e1, e2 ){
        alert( e1, e2 );
      }
    });
  }
}

//. #29
function toggle_select_all(){
  //console.log( 'toggle_select_all()' );
  var c = $('#select_all_for_checked_users').prop( 'checked' );
  if( c ){
    //. チェックが入った絵の uuid 一覧を取得する
    var uuids = [];
    $('.chk_images').each( function( i, e ){
      var uuid = $(e).attr( 'uuid' );
      if( $(e).prop( 'checked' ) && uuids.indexOf( uuid ) == -1 ){
        uuids.push( uuid );
      }
    });

    //. 同じ uuid の全ての絵にチェックを入れる
    $('.chk_images').each( function( i, e ){
      var uuid = $(e).attr( 'uuid' );
      if( uuids.indexOf( uuid ) > -1 ){
        //$(e).attr( 'checked', true ).prop( 'checked', true ).change();
        $(e).attr( 'checked', true ).prop( 'checked', true ).change();
      }
    });
  }else{
    //. 全てのチェックを外す
    $('.chk_images').each( function( i, e ){
      //$(e).attr( 'checked', false ).prop( 'checked', false ).change();
      $(e).attr( 'checked', false ).prop( 'checked', false ).change();
    });
  }
}
</script>

<style type="text/css">
html, body{
  text-align: center;
  background-color: #fafafa;
  font-size: 20px;
  color: #333;
}

.chkbox{
  margin: 0 0 10px 20px
}
.chkbox label{
  padding-left: 38px;
  font-size: 32px;
  line-height: 32px;
  display: inline-block;
  cursor: pointer;
  position: relative;
}
.chkbox label:before{
  content: '';
  width: 32px;
  height: 32px;
  display: inline-block;
  position: absolute;
  background-color: #fff;
  box-shadow: inset 1px 2px 3px 0px #000;
  border-radius: 6px 6px 6px 6px;
}
.chkbox input[type=checkbox]{
  display: none;
}
.chkbox input[type=checkbox]:checked + label:before{
  content: '\2713';
  font-size: 34px;
  color: #fff;
  background-color: #08f;
}
</style>
</head>
<body>

<h1><%= room %></h1>

<div class="container">
  <div>
    <table style="width: 100%;">
      <tr>
        <td>
          <input type="range" class="form-control" id="interlude" min="0" max="3600" value="0" step="10"/>
        </td>
        <td>
          <input type="text" style="width: 50px;" value="0" id="display_interlude" readonly/>
        </td>
      </tr>
    </table>
  </div>
  <!--
  <table id="image_table" class="table table-bordered table-striped">
    <thead>
      <tr><th>#</th><th>画像</th><th>名前</th><th>コメント</th><th>日付時刻</th></tr>
    </thead>
    <tbody id="images_table_tbody">
    </tbody>
  </table>
  -->
  <div class="row" id="cards-groups">

  </div>

  <div class="chkbox">
    <input type="checkbox" id="select_all_for_checked_users" onChange="toggle_select_all();"/>
    <label for="select_all_for_checked_users">　同じユーザーの描いた画像を全てチェック</label>
  </div>
  <br/>
  <button id="selected_images_btn" class="btn btn-primary" onClick="selected_images();">選択画像を表示</button>
</div>

<div class="modal bd-example-modal-lg fade" id="imagesModal" tabindex="-1" role="dialog" aria-labbelledby="imagesModal" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title" id="imagesModalLabel"></h4>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body" id="imagesmodal-body">
        <div id="card-groups">
        </div>
      </div>
      <div class="modal-footer btn-center">
        <!--
        <button type="button" class="btn btn-info btn-xs py-0" onClick="migrateFrom();"><i class="fas fa-file-export"></i></button>
        -->
      </div>
    </div>
  </div>
</div>


</body>
</html>
